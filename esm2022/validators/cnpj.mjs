/**
 * Valida um número de CNPJ (Cadastro Nacional da Pessoa Jurídica).
 *
 * @example <caption>Valide se o campo corresponde a um CNPJ válido</caption>
 * ```typescript
 * const control = new FormControl('11111111111111', cnpjValidator);
 *
 * console.log(control.errors); // {cnpjInvalid: true}
 * ```
 *
 * @param control - O `AbstractControl` do formulário a ser validado.
 * @returns Retorna um objeto de erro com a chave `cnpjInvalid` se o CNPJ for inválido, caso contrário retorna `null`.
 */
export function cnpjValidator(control) {
    if (!control.value) {
        return null;
    }
    const cnpj = String(control.value).replace(/\D/g, '');
    if (cnpj.length !== 14) {
        return { cnpjInvalid: true };
    }
    if (!cnpj ||
        cnpj.length !== 14 ||
        cnpj === '00000000000000' ||
        cnpj === '11111111111111' ||
        cnpj === '22222222222222' ||
        cnpj === '33333333333333' ||
        cnpj === '44444444444444' ||
        cnpj === '55555555555555' ||
        cnpj === '66666666666666' ||
        cnpj === '77777777777777' ||
        cnpj === '88888888888888' ||
        cnpj === '99999999999999') {
        return { cnpjInvalid: true };
    }
    let tamanho = cnpj.length - 2;
    let numeros = cnpj.substring(0, tamanho);
    const digitos = cnpj.substring(tamanho);
    let soma = 0;
    let pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
        soma += Number(numeros.charAt(tamanho - i)) * pos--;
        if (pos < 2) {
            pos = 9;
        }
    }
    let resultado = (soma % 11 < 2 ? 0 : 11 - (soma % 11)).toString();
    if (resultado !== digitos.charAt(0)) {
        return { cnpjInvalid: true };
    }
    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
        soma += Number(numeros.charAt(tamanho - i)) * pos--;
        if (pos < 2) {
            pos = 9;
        }
    }
    resultado = (soma % 11 < 2 ? 0 : 11 - (soma % 11)).toString();
    if (resultado !== digitos.charAt(1)) {
        return { cnpjInvalid: true };
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY25wai5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92YWxpZGF0b3JzL2NucGoudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxVQUFVLGFBQWEsQ0FBQyxPQUF3QjtJQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXRELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7UUFDdEIsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUM5QjtJQUVELElBQ0UsQ0FBQyxJQUFJO1FBQ0wsSUFBSSxDQUFDLE1BQU0sS0FBSyxFQUFFO1FBQ2xCLElBQUksS0FBSyxnQkFBZ0I7UUFDekIsSUFBSSxLQUFLLGdCQUFnQjtRQUN6QixJQUFJLEtBQUssZ0JBQWdCO1FBQ3pCLElBQUksS0FBSyxnQkFBZ0I7UUFDekIsSUFBSSxLQUFLLGdCQUFnQjtRQUN6QixJQUFJLEtBQUssZ0JBQWdCO1FBQ3pCLElBQUksS0FBSyxnQkFBZ0I7UUFDekIsSUFBSSxLQUFLLGdCQUFnQjtRQUN6QixJQUFJLEtBQUssZ0JBQWdCO1FBQ3pCLElBQUksS0FBSyxnQkFBZ0IsRUFDekI7UUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQzlCO0lBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDOUIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixJQUFJLEdBQUcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRXRCLEtBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ3BELElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDVDtLQUNGO0lBRUQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsRSxJQUFJLFNBQVMsS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ25DLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDOUI7SUFFRCxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUN0QixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNULEdBQUcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRWxCLEtBQUssSUFBSSxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ3BELElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDVDtLQUNGO0lBRUQsU0FBUyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUQsSUFBSSxTQUFTLEtBQUssT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNuQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQzlCO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuLyoqXHJcbiAqIFZhbGlkYSB1bSBuw7ptZXJvIGRlIENOUEogKENhZGFzdHJvIE5hY2lvbmFsIGRhIFBlc3NvYSBKdXLDrWRpY2EpLlxyXG4gKlxyXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5WYWxpZGUgc2UgbyBjYW1wbyBjb3JyZXNwb25kZSBhIHVtIENOUEogdsOhbGlkbzwvY2FwdGlvbj5cclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjb25zdCBjb250cm9sID0gbmV3IEZvcm1Db250cm9sKCcxMTExMTExMTExMTExMScsIGNucGpWYWxpZGF0b3IpO1xyXG4gKlxyXG4gKiBjb25zb2xlLmxvZyhjb250cm9sLmVycm9ycyk7IC8vIHtjbnBqSW52YWxpZDogdHJ1ZX1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBjb250cm9sIC0gTyBgQWJzdHJhY3RDb250cm9sYCBkbyBmb3JtdWzDoXJpbyBhIHNlciB2YWxpZGFkby5cclxuICogQHJldHVybnMgUmV0b3JuYSB1bSBvYmpldG8gZGUgZXJybyBjb20gYSBjaGF2ZSBgY25wakludmFsaWRgIHNlIG8gQ05QSiBmb3IgaW52w6FsaWRvLCBjYXNvIGNvbnRyw6FyaW8gcmV0b3JuYSBgbnVsbGAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY25walZhbGlkYXRvcihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XHJcbiAgaWYgKCFjb250cm9sLnZhbHVlKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNucGogPSBTdHJpbmcoY29udHJvbC52YWx1ZSkucmVwbGFjZSgvXFxEL2csICcnKTtcclxuXHJcbiAgaWYgKGNucGoubGVuZ3RoICE9PSAxNCkge1xyXG4gICAgcmV0dXJuIHsgY25wakludmFsaWQ6IHRydWUgfTtcclxuICB9XHJcblxyXG4gIGlmIChcclxuICAgICFjbnBqIHx8XHJcbiAgICBjbnBqLmxlbmd0aCAhPT0gMTQgfHxcclxuICAgIGNucGogPT09ICcwMDAwMDAwMDAwMDAwMCcgfHxcclxuICAgIGNucGogPT09ICcxMTExMTExMTExMTExMScgfHxcclxuICAgIGNucGogPT09ICcyMjIyMjIyMjIyMjIyMicgfHxcclxuICAgIGNucGogPT09ICczMzMzMzMzMzMzMzMzMycgfHxcclxuICAgIGNucGogPT09ICc0NDQ0NDQ0NDQ0NDQ0NCcgfHxcclxuICAgIGNucGogPT09ICc1NTU1NTU1NTU1NTU1NScgfHxcclxuICAgIGNucGogPT09ICc2NjY2NjY2NjY2NjY2NicgfHxcclxuICAgIGNucGogPT09ICc3Nzc3Nzc3Nzc3Nzc3NycgfHxcclxuICAgIGNucGogPT09ICc4ODg4ODg4ODg4ODg4OCcgfHxcclxuICAgIGNucGogPT09ICc5OTk5OTk5OTk5OTk5OSdcclxuICApIHtcclxuICAgIHJldHVybiB7IGNucGpJbnZhbGlkOiB0cnVlIH07XHJcbiAgfVxyXG5cclxuICBsZXQgdGFtYW5obyA9IGNucGoubGVuZ3RoIC0gMjtcclxuICBsZXQgbnVtZXJvcyA9IGNucGouc3Vic3RyaW5nKDAsIHRhbWFuaG8pO1xyXG4gIGNvbnN0IGRpZ2l0b3MgPSBjbnBqLnN1YnN0cmluZyh0YW1hbmhvKTtcclxuICBsZXQgc29tYSA9IDA7XHJcbiAgbGV0IHBvcyA9IHRhbWFuaG8gLSA3O1xyXG5cclxuICBmb3IgKGxldCBpID0gdGFtYW5obzsgaSA+PSAxOyBpLS0pIHtcclxuICAgIHNvbWEgKz0gTnVtYmVyKG51bWVyb3MuY2hhckF0KHRhbWFuaG8gLSBpKSkgKiBwb3MtLTtcclxuICAgIGlmIChwb3MgPCAyKSB7XHJcbiAgICAgIHBvcyA9IDk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsZXQgcmVzdWx0YWRvID0gKHNvbWEgJSAxMSA8IDIgPyAwIDogMTEgLSAoc29tYSAlIDExKSkudG9TdHJpbmcoKTtcclxuICBpZiAocmVzdWx0YWRvICE9PSBkaWdpdG9zLmNoYXJBdCgwKSkge1xyXG4gICAgcmV0dXJuIHsgY25wakludmFsaWQ6IHRydWUgfTtcclxuICB9XHJcblxyXG4gIHRhbWFuaG8gPSB0YW1hbmhvICsgMTtcclxuICBudW1lcm9zID0gY25wai5zdWJzdHJpbmcoMCwgdGFtYW5obyk7XHJcbiAgc29tYSA9IDA7XHJcbiAgcG9zID0gdGFtYW5obyAtIDc7XHJcblxyXG4gIGZvciAobGV0IGkgPSB0YW1hbmhvOyBpID49IDE7IGktLSkge1xyXG4gICAgc29tYSArPSBOdW1iZXIobnVtZXJvcy5jaGFyQXQodGFtYW5obyAtIGkpKSAqIHBvcy0tO1xyXG4gICAgaWYgKHBvcyA8IDIpIHtcclxuICAgICAgcG9zID0gOTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc3VsdGFkbyA9IChzb21hICUgMTEgPCAyID8gMCA6IDExIC0gKHNvbWEgJSAxMSkpLnRvU3RyaW5nKCk7XHJcbiAgaWYgKHJlc3VsdGFkbyAhPT0gZGlnaXRvcy5jaGFyQXQoMSkpIHtcclxuICAgIHJldHVybiB7IGNucGpJbnZhbGlkOiB0cnVlIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iXX0=