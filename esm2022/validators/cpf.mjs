/**
 * Valida um número de CPF (Cadastro de Pessoas Físicas).
 *
 * @example <caption>Valide se o campo corresponde a um CPF válido</caption>
 * ```typescript
 * const control = new FormControl('11111111111', cpfValidator);
 *
 * console.log(control.errors); // {cpfInvalid: true}
 * ```
 *
 * @param control - O `AbstractControl` do formulário a ser validado.
 * @returns Retorna um objeto de erro com a chave `cpfInvalid` se o CPF for inválido, caso contrário retorna `null`.
 */
export function cpfValidator(control) {
    if (!control.value) {
        return null;
    }
    const cpf = String(control.value).replace(/\D/g, '');
    if (cpf.length !== 11) {
        return { cpfInvalid: true };
    }
    if (cpf === '00000000000' ||
        cpf === '11111111111' ||
        cpf === '22222222222' ||
        cpf === '33333333333' ||
        cpf === '44444444444' ||
        cpf === '55555555555' ||
        cpf === '66666666666' ||
        cpf === '77777777777' ||
        cpf === '88888888888' ||
        cpf === '99999999999') {
        return { cpfInvalid: true };
    }
    let soma = 0;
    for (let i = 1; i <= 9; i += 1) {
        soma = soma + parseInt(cpf.substring(i - 1, i), 10) * (11 - i);
    }
    let resto = (soma * 10) % 11;
    if (resto === 10 || resto === 11) {
        resto = 0;
    }
    if (resto !== parseInt(cpf.substring(9, 10), 10)) {
        return { cpfInvalid: true };
    }
    soma = 0;
    for (let i = 1; i <= 10; i += 1) {
        soma = soma + parseInt(cpf.substring(i - 1, i), 10) * (12 - i);
    }
    resto = (soma * 10) % 11;
    if (resto === 10 || resto === 11) {
        resto = 0;
    }
    if (resto === parseInt(cpf.substring(10, 11), 10)) {
        return null;
    }
    return { cpfInvalid: true };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ZhbGlkYXRvcnMvY3BmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBd0I7SUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQ3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDN0I7SUFFRCxJQUNFLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhO1FBQ3JCLEdBQUcsS0FBSyxhQUFhLEVBQ3JCO1FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUM3QjtJQUVELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM5QixJQUFJLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDaEU7SUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDN0IsSUFBSSxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7UUFDaEMsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUNYO0lBRUQsSUFBSSxLQUFLLEtBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDN0I7SUFFRCxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ1QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQy9CLElBQUksR0FBRyxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNoRTtJQUVELEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDekIsSUFBSSxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7UUFDaEMsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUNYO0lBRUQsSUFBSSxLQUFLLEtBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2pELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG4vKipcclxuICogVmFsaWRhIHVtIG7Dum1lcm8gZGUgQ1BGIChDYWRhc3RybyBkZSBQZXNzb2FzIEbDrXNpY2FzKS5cclxuICpcclxuICogQGV4YW1wbGUgPGNhcHRpb24+VmFsaWRlIHNlIG8gY2FtcG8gY29ycmVzcG9uZGUgYSB1bSBDUEYgdsOhbGlkbzwvY2FwdGlvbj5cclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBjb25zdCBjb250cm9sID0gbmV3IEZvcm1Db250cm9sKCcxMTExMTExMTExMScsIGNwZlZhbGlkYXRvcik7XHJcbiAqXHJcbiAqIGNvbnNvbGUubG9nKGNvbnRyb2wuZXJyb3JzKTsgLy8ge2NwZkludmFsaWQ6IHRydWV9XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcGFyYW0gY29udHJvbCAtIE8gYEFic3RyYWN0Q29udHJvbGAgZG8gZm9ybXVsw6FyaW8gYSBzZXIgdmFsaWRhZG8uXHJcbiAqIEByZXR1cm5zIFJldG9ybmEgdW0gb2JqZXRvIGRlIGVycm8gY29tIGEgY2hhdmUgYGNwZkludmFsaWRgIHNlIG8gQ1BGIGZvciBpbnbDoWxpZG8sIGNhc28gY29udHLDoXJpbyByZXRvcm5hIGBudWxsYC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcGZWYWxpZGF0b3IoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xyXG4gIGlmICghY29udHJvbC52YWx1ZSkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjcGYgPSBTdHJpbmcoY29udHJvbC52YWx1ZSkucmVwbGFjZSgvXFxEL2csICcnKTtcclxuICBpZiAoY3BmLmxlbmd0aCAhPT0gMTEpIHtcclxuICAgIHJldHVybiB7IGNwZkludmFsaWQ6IHRydWUgfTtcclxuICB9XHJcblxyXG4gIGlmIChcclxuICAgIGNwZiA9PT0gJzAwMDAwMDAwMDAwJyB8fFxyXG4gICAgY3BmID09PSAnMTExMTExMTExMTEnIHx8XHJcbiAgICBjcGYgPT09ICcyMjIyMjIyMjIyMicgfHxcclxuICAgIGNwZiA9PT0gJzMzMzMzMzMzMzMzJyB8fFxyXG4gICAgY3BmID09PSAnNDQ0NDQ0NDQ0NDQnIHx8XHJcbiAgICBjcGYgPT09ICc1NTU1NTU1NTU1NScgfHxcclxuICAgIGNwZiA9PT0gJzY2NjY2NjY2NjY2JyB8fFxyXG4gICAgY3BmID09PSAnNzc3Nzc3Nzc3NzcnIHx8XHJcbiAgICBjcGYgPT09ICc4ODg4ODg4ODg4OCcgfHxcclxuICAgIGNwZiA9PT0gJzk5OTk5OTk5OTk5J1xyXG4gICkge1xyXG4gICAgcmV0dXJuIHsgY3BmSW52YWxpZDogdHJ1ZSB9O1xyXG4gIH1cclxuXHJcbiAgbGV0IHNvbWEgPSAwO1xyXG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkgKz0gMSkge1xyXG4gICAgc29tYSA9IHNvbWEgKyBwYXJzZUludChjcGYuc3Vic3RyaW5nKGkgLSAxLCBpKSwgMTApICogKDExIC0gaSk7XHJcbiAgfVxyXG5cclxuICBsZXQgcmVzdG8gPSAoc29tYSAqIDEwKSAlIDExO1xyXG4gIGlmIChyZXN0byA9PT0gMTAgfHwgcmVzdG8gPT09IDExKSB7XHJcbiAgICByZXN0byA9IDA7XHJcbiAgfVxyXG5cclxuICBpZiAocmVzdG8gIT09IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoOSwgMTApLCAxMCkpIHtcclxuICAgIHJldHVybiB7IGNwZkludmFsaWQ6IHRydWUgfTtcclxuICB9XHJcblxyXG4gIHNvbWEgPSAwO1xyXG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwOyBpICs9IDEpIHtcclxuICAgIHNvbWEgPSBzb21hICsgcGFyc2VJbnQoY3BmLnN1YnN0cmluZyhpIC0gMSwgaSksIDEwKSAqICgxMiAtIGkpO1xyXG4gIH1cclxuXHJcbiAgcmVzdG8gPSAoc29tYSAqIDEwKSAlIDExO1xyXG4gIGlmIChyZXN0byA9PT0gMTAgfHwgcmVzdG8gPT09IDExKSB7XHJcbiAgICByZXN0byA9IDA7XHJcbiAgfVxyXG5cclxuICBpZiAocmVzdG8gPT09IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoMTAsIDExKSwgMTApKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHJldHVybiB7IGNwZkludmFsaWQ6IHRydWUgfTtcclxufVxyXG4iXX0=